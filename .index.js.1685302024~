require('dotenv').config();
const express = require('express');
const cors = require('cors');
const app = express();
const mongoose = require('mongoose');
const { Schema } = mongoose;
const dns = require('dns');
const urlparser = require('url');

// db connection
// mongoose.connect(process.env.MONGO_URI);
// const urlSchema = new Schema({
//   original_url: { type: String, required: true },
//   short_url: Number
// });
// const Url = mongoose.model('Url', urlSchema);
const client = new MongoClient(process.env.MONGO_URI);
const db = client.db('freeCodeCamp');
const urls = db.collection('urls');


// Basic Configuration
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use('/public', express.static(`${process.cwd()}/public`));

app.get('/', function(req, res) {
  res.sendFile(process.cwd() + '/views/index.html');
});

// Your first API endpoint
app.post('/api/shorturl', function(req, res) {

  const dnslookup = dns.lookup(urlparser.parse(url).hostname, async (err, address) =>{
    if(!address) {
      res.json({ error: 'invalid url' })
    }else{
     const urlCount = await urls.countDocuments({});
      const urlDoc = {
        original_url: req.body.url,
        short_url: urlCount + 1
      })
      const result = await urls.insertOne(urlDoc);
      console.log(result)
      res.json({
        original_url: urlDoc.original_url,
        short_url: urlDoc.short_url
      })
   }
     
    
                
  })
});
// app.post('api/shorturl', (req, res) => {
//   console.log(req.body);
//   res.json({ greeting: 'hello API' });
// })

app.listen(port, function() {
  console.log(`Listening on port ${port}`);
});
